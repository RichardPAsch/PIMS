using System;
using System.Configuration;
using System.Web.Http;
using Microsoft.AspNet.Identity;
using Microsoft.Owin;
using Microsoft.Owin.Cors;
using Microsoft.Owin.Security.OAuth;
using Owin;
using PIMS.Core.Models;
using PIMS.Core.Security;
using PIMS.Web.Api.DependencyResolution;


namespace PIMS.Web.Api
{
    public partial class StartUp
    {
        public static string PublicClientId { get; private set; }
        public static Func<UserManager<ApplicationUser>> UserManagerFactory { get; set; }
        
        // Generated by Start.Auth.cs
        // For more information on configuring authentication, please visit http://go.microsoft.com/fwlink/?LinkId=301864
        // Generates StartUp.cs.
        public void ConfigureAuth(IAppBuilder app)
        {
            var connString = ConfigurationManager.ConnectionStrings["PIMS-ConnString"].ConnectionString;

            

           
            // Pass http config object to appropriate WebApiConfig method. Includes route mapping to OWIN pipeline, 
            // eliminating need for Global.asax.
            var config = new HttpConfiguration();
            WebApiConfig.Register(config);
           

            PublicClientId = "self";
            UserManagerFactory = () => new UserManager<ApplicationUser>(new NHibernate.AspNet.Identity
                                          .UserStore<ApplicationUser>(NHibernateConfiguration.CreateSessionFactory(connString).OpenSession()));

            
            
            // Wire up the authorization server (KatanaAuthorizationServer) to the Katana pipeline, 
            // and configure accordingly. Token generation.
            // TODO: Use AccessTokenExpireTimeSpan of 3 hours for PROD.
            app.UseOAuthAuthorizationServer(new OAuthAuthorizationServerOptions
                                        {
                                            AllowInsecureHttp = true,                               // for development only - will need SSL for PROD
                                            TokenEndpointPath = new PathString("/token"),
                                            AccessTokenExpireTimeSpan = TimeSpan.FromMinutes(60),   // for development only 
                                            //AccessTokenExpireTimeSpan = TimeSpan.FromHours(3), 
                                            Provider = new KatanaAuthorizationServer(PublicClientId, UserManagerFactory)
                                        });

           
            // Token consumption.
            app.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions());
          
          

            // Specify CORS policy. Currently using "AllowAll" for testing purposes.
            // TODO: For PROD - create a new policy provider that determines the specific incoming HTTP origins, headers, and methods expected.
            app.UseCors(CorsOptions.AllowAll);

            // Wire up ASP.NET Web API to OWIN server pipeline. Associate IoC/DI with pipeline to avoid constructor errors.
            config.DependencyResolver = new StructureMapDependencyResolver(IoC.Initialize(connString));
            app.UseWebApi(config);
    


            // Uncomment the following lines to enable logging in with third party login providers:
            //app.UseMicrosoftAccountAuthentication(
            //    clientId: "",
            //    clientSecret: "");

            //app.UseTwitterAuthentication(
            //   consumerKey: "",
            //   consumerSecret: "");

            //app.UseFacebookAuthentication(
            //   appId: "",
            //   appSecret: "");

            //app.UseGoogleAuthentication();
        }
    }
}